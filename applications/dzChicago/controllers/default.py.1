# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
#########################################################################


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Hello World")
    return dict(message=T('Welcome to web2py!'))

def add_member():
    form = SQLFORM(db.members)
    form.process()
    return dict(form=form)

def add_event():
    form = SQLFORM(db.event_attendance)
    form.process()
    return dict(form=form)

def add_level():
    form = SQLFORM(db.membership_level)
    form.process()
    return dict(form = form)

def view_members():
    levels= db().select(db.members.ALL, db.membership_level.ALL,
                        left=db.members.on(db.members.member_level == db.membership_level.id))
    return dict(levels=levels)

def view_events():
    levels=db().select(db.event_attendance.ALL, db.members.ALL,
                       left=db.members.on(db.event_attendance.members == db.members.id))
    return dict(levels=levels)

def view_levels():
    rows = db(db.membership_level).select()
    return dict(rows=rows)

def member_update():
    update = db.members(request.args(0))
    form = SQLFORM(db.members, update)
    form.process()
    return dict(form=form)

def event_update():
    update = db.event_attendance(request.args(0))
    form = SQLFORM(db.event_attendance, update)
    form.process()
    return dict(form=form)

def level_update():
    update = db.membership_level(request.args(0))
    form = SQLFORM(db.membership_level, update)
    form.process
    return dict(form=form)
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()
